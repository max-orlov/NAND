/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
		// if instruction[7..8]==11
		ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=regOut);
        
		// if instruction[7..8]==10 or 00 
		Mul(a=x,b=y, out=mulOut, out[0..7]=mul1, out[8..15]=mul2);
		
		// if instruction[7..8]==01 
		ShiftLeft(in=x, out=xLeft);
		ShiftLeft(in=y, out=yLeft);
		ShiftRight(in=x, out=xRight);
		ShiftRight(in=y, out=yRight);
		
		Mux4Way16(a=yRight, b=xRight, c=yLeft, d=xLeft, sel=instruction[4..5], out=shiftOut, out[0..7]=shift1, out[8..15]=shift2, out[15]=isShiftNg);
		
		// Return the result
		Mux4Way16(a=mulOut, b=shiftOut, c=mulOut, d=regOut, sel=instruction[7..8], out[0..7]=workSpace1, out[8..15]=workSpace2,out[15]=ng, out=out);
		Or8Way(in=workSpace1, out=isNot01);
		Or8Way(in=workSpace2, out=isNot02);
		Or(a=isNot01, b=isNot02, out=isNot0);
		Not(in=isNot0, out=zr);
}