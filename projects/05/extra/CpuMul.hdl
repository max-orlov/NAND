/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/


CHIP CpuMul {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // choose register A or memory according to the bit 'a' in the given instruction.
	Mux16(a=regAOut, b=inM, sel=instruction[12], out=AorM);
	
	// run ExtendAlu on the formatted instruction
	ExtendAlu(x=regDOut, y=AorM, instruction=instruction[6..14], out=aluOut, out=outM, zr=zrOut, ng=ngOut);
		
	And(a=instruction[15], b=true, out=isCInst);				// check if the instruction is of type C-instruction.
	Not(in=isCInst, out=isAInst);								// check if the instruction is of type A-instruction.
	
	And(a=instruction[3], b=true, out=updateM);					// check if 'd3' bit is on (write to memory).
	And(a=instruction[4], b=isCInst, out=updateD);				// check if 'd2' bit is on (write to register D) and the instruction is of type C-instruction..
	Or(a=instruction[5], b=isAInst, out=updateA);				// check if 'd1' bit is on (write to register A) or the instruction is of type A-instruction.
	
	And(a=updateM,b=isCInst, out=writeM);						// the value of writeM is a combination of the C-instruction and the updateM indication.
	
	DRegister(in=aluOut, load=updateD, out=regDOut);			// set register D according to ALU if updateD indicates so.
	
	Mux16(a=aluOut, b=instruction, sel=isAInst, out=regAIn);	// choose ALU output or the given instruction according to the instruction type.
	ARegister(in=regAIn, load=updateA, out=regAOut,				// set register A according to MUX output if updateA indicates so and
		out[0..14]=addressM, out[15]=false);					// set the address of the memory to the address which was output from register A.
	
	// we check if jump is required (according to j1-j3 and ALU's response).	
	And(a=instruction[1], b=zrOut, out=zeroSatisfied);			// check if JZ is on and ALU output indicates zero.
	And(a=instruction[2], b=ngOut, out=negSatisfied);			// check if JL is on and ALU output indicates negative.
	Or(a=zrOut, b=ngOut, out=isZeroNeg);						// combine for getting <=0.
	Not(in=isZeroNeg, out=posFilled);
	And(a=instruction[0], b=posFilled, out=posSatisfied);		// check if JG is on and ALU output indicates positive.
	
	Or(a=zeroSatisfied, b=negSatisfied, out=tempJump);			// if one of the conditions above is satisfied -> jump is valid.
	Or(a=tempJump, b=posSatisfied, out=shouldJump);
	And(a=shouldJump, b=isCInst, out=jump);						// only if this is a C-instruction and jump is satisfied -> jump.
	
	// we check if inc is required (if this is a C-instruction and jump is not satisfied,
	// 								or if this is a A-instruction).
	Not(in=jump, out=dontJump);
	And(a=dontJump, b=isCInst, out=tempInc);
	Or(a=tempInc, b=isAInst, out=inc);
	
	PC(in=regAOut, load=jump, inc=inc, reset=reset, out[0..14]=pc, out[15]=false);	
}