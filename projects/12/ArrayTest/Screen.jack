// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        do Screen.setColor(true);
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 8192){
            do Memory.poke(i,-1);
            let i = i + 16;
        }
        return;
    }

    /** Sets the color to be used in further draw commands*
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int cor, bit, i, tmp;
        if ( (x<0) | (y<0) ){
            do Sys.error(7);
        }
        else{
            let i = 0;
            while ( i < 5){
                let y = y + y;
                let i = i + 1;
            }
            let i = 4;
            while ( i < 16){
                if (Math.getTwoToThe(i) & x){
                    let tmp = tmp + Math.getTwoToThe(i-4);
                }
                let i = i + 1;
            }
            let cor = 16384 + y + tmp;
            let bit = Math.getTwoToThe(x & 15);
            if (color){
                do Memory.poke( cor, Memory.peek(cor) | bit);
            }
            else{
                do Memory.poke( cor, (Memory.peek(cor) & (~bit) ) );
            }
        }
        return;
    }

    function int getDirection(int a,int b){

        if (a=b){
            return 0;
        }
        else{
            if (a<b){
                return 1;
            }
            else{
                return -1;
            }
        }
    }

    function void drawLineRaw(int x,int y){
        var int cor, bit, i, tmp;
        let i = 0;
        while ( i < 5){
            let y = y + y;
            let i = i + 1;
        }
        let i = 4;
        while ( i < 16){
            if (Math.getTwoToThe(i) & x){
                let tmp = tmp + Math.getTwoToThe(i-4);
            }
            let i = i + 1;
        }
        let cor = 16384 + y + tmp;

        do Memory.poke( cor, color);
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx, xf, yf;
        if ( (x1<0) | (x2<0) | (y1<0) | (y2<0) ){
            do Sys.error(8);
        }
        else{
            if ( (x1=x2) & (y1=y2) ){
                do Screen.drawPixel(x1,y1);
                return;
            }

            let a = 0;
            let b = 0;
            let xf = Screen.getDirection(x1,x2);
            let yf = Screen.getDirection(y1,y2);
            let dy = Math.abs(y2 - y1);
            let dx = Math.abs(x2 - x1);
            let adyMinusbdx = 0;

            while ( ((~(Math.abs(a)>dx)) | (dx=0)) & ((~(Math.abs(b)>dy)) | (dy=0)) ){
                if ( (dy = 0) & (x1+a+16<x2) &  (((x1+a) & 15)=0)){
                    do Screen.drawLineRaw(x1+a,y1);
                    let a = a + 16;
                    let adyMinusbdx = adyMinusbdx + dx;
                }
                else{
                    do Screen.drawPixel((x1+a),(y1+b));
                    if ( ~(adyMinusbdx < 0) ){
                        let a = a + xf;
                        let adyMinusbdx = adyMinusbdx - dy;
                    }
                    else{
                        let b = b + yf;
                        let adyMinusbdx = adyMinusbdx + dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        if ( (x1<0) | (x2<0) | (y1<0) | (y2<0) ){
            do Sys.error(9);
        }
        else{
            while ( i < (y2+1)){
                do Screen.drawLine(x1, i, x2, i);
                let i = i + 1;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dy, tmpX, tmpY, tmpY2, rr;
        let dy = r;
        let rr = r * r;
        if ( (cx<0) | (cy<0) ){
            do Sys.error(12);
        }
        else{
            if (~( r < 0)){
                while ( ~(dy = 0) ){
                    let tmpX = Math.sqrt(rr - (dy*dy));
                    let tmpY = cy + dy;
                    let tmpY2 = cy - dy;
                    do Screen.drawLine( (cx - tmpX) , tmpY, (cx + tmpX) , tmpY);
                    do Screen.drawLine( (cx - tmpX) , tmpY2, (cx + tmpX) , tmpY2);

                    let dy = dy - 1;
                }
                do Screen.drawLine( (cx - r) , cy, (cx + r) , cy);
            }
            else{
                do Sys.error(13);
            }
        }

        return;
    }
}
