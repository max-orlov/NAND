// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field Array str;
    field int size, index;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        var int i, asciiCode;
        let size = maxLength;
        if ( size > 0 ){
            let str = Array.new(size);
        }
        else{
            if (~(size = 0)){
                do Sys.error(14);
            }
        }
        let index = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if (size > 0){
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return index;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        if (j < index ){
            return str[j];
        }
        else{
            do Sys.error(15);
            return 32;
        }
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if (j<index){
            let str[j] = c;
        }
        else{
            do Sys.error(16);
        }
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if (index < size - 1){
            let str[index] = c;
            let index = index + 1;
        }
        else{
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if (index > 0 & index<size){
            let str[index] = 0;
            let index = index - 1;
        }
        else{
            do Sys.error(18);
        }
        return;
    }

    function int getDigitValue(char c){
        return (c - 48);
    }

    function char getCharValue(int x){
        return (48 + x);
    }


    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int v, i, d;
        let v = 0;
        let i = 0;
        while ( i < index){
            if (~(str[i]=45)){
                let d = String.getDigitValue(str[i]);
                if ((d>0) & (d<10)){
                    let v = Math.multiply(v, 10) + d;
                }
            }
            let i = i + 1;
        }
        if (str[0] = 45){
            let v = (-v);
        }
        return v;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let index = 0;
        if ( number < 0 ){
            do appendChar(45);
        }
        do int2String(Math.abs(number));
        return;
    }

    method void int2String(int number){
        var int lastDigit, tmp;
        var char c;
        let tmp = number/10;
        let lastDigit = number - (tmp*10);
        let c = String.getCharValue(lastDigit);

        if (number < 10){
            do appendChar(c);
        }
        else{
            if (index < size){
                do int2String(tmp);
                do appendChar(c);
            }
            else{
                do Sys.error(19);
            }
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
