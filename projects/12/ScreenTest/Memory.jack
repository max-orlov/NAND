// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

    static Pointer freeList;
    static Array memory;

    /** Initializes memory parameters. */
    function void init() {
        let freeList = 2048;
        let freeList[0] = 14335;
        let freeList[1] = null;
        let memory = 0;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        // Implementing first-fit heuristic.
        var int segment, block, backSegment;
        let segment = freeList;
        if (size > 0){
            while ((segment[0] < size) & (~(segment[1] = null)) ){
                let backSegment = segment;
                let segment = segment[1];
            }
            if ( segment[0] < size){
                do Sys.error(6);
            }
            else{
                let block = segment + (segment[0] - size - 1);
                if (block = segment){
                    let backSegment[1] = segment[1];
                }
                let segment[0] = segment[0] - size;
                let block[-1] = size + 1;
                return block;
            }
        }
        else{
            do Sys.error(5);
        }
        return 0;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int segment, tmpSegment;

        let segment = object - 1;
        let segment[0] = object[-1];

        // Inserting segment into list
        let freeList[0] = freeList + segment[0];
        let tmpSegment = freeList[1];
        let freeList[1] = segment;
        let segment[1] = tmpSegment;
        return;
    }

}
