// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=isRam0, b=isRam1, c=isRam2, d=isRam3, e=isRam4, f=isRam5, g=isRam6, h=isRam7);
	
    RAM8(in=in, load=isRam0, address=address[0..2], out=ram0);
    RAM8(in=in, load=isRam1, address=address[0..2], out=ram1);
    RAM8(in=in, load=isRam2, address=address[0..2], out=ram2);
    RAM8(in=in, load=isRam3, address=address[0..2], out=ram3);
    RAM8(in=in, load=isRam4, address=address[0..2], out=ram4);
    RAM8(in=in, load=isRam5, address=address[0..2], out=ram5);
    RAM8(in=in, load=isRam6, address=address[0..2], out=ram6);
    RAM8(in=in, load=isRam7, address=address[0..2], out=ram7);
	
	Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4,f=ram5,g=ram6, h=ram7, sel=address[3..5], out=out);
}